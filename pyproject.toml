[tool.poetry]
name = "kor-ai-explainability"
version = "1.0.0"
description = "Comprehensive explainability and audit framework for Kor.ai surveillance models"
authors = ["Kor.ai Team <dev@kor.ai>"]
readme = "README.md"
packages = [
    {include = "src"},
]

[tool.poetry.dependencies]
python = "^3.8"
# Core dependencies
numpy = "^1.21.0"
pandas = "^1.5.0"
scipy = "^1.9.0"
scikit-learn = "^1.1.0"
matplotlib = "^3.5.0"
seaborn = "^0.11.0"
plotly = "^5.10.0"

# Data validation and serialization
pydantic = "^1.10.0"
marshmallow = "^3.17.0"

# Database and data storage
sqlalchemy = "^1.4.0"
alembic = "^1.8.0"
redis = "^4.3.0"

# Configuration and logging
PyYAML = "^6.0"
python-dotenv = "^0.20.0"
structlog = "^22.1.0"

# API and web framework (if needed)
fastapi = {version = "^0.85.0", optional = true}
uvicorn = {version = "^0.18.0", optional = true}

# Monitoring and observability
prometheus-client = "^0.14.0"
opentelemetry-api = "^1.12.0"
opentelemetry-sdk = "^1.12.0"

# Date and time utilities
python-dateutil = "^2.8.0"
pytz = "^2022.1"

[tool.poetry.group.dev.dependencies]
# Testing framework
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
pytest-html = "^3.1.0"
pytest-xdist = "^3.1.0"

# Code quality and linting
black = "^22.10.0"
isort = "^5.10.0"
flake8 = "^5.0.0"
pylint = "^2.15.0"
mypy = "^0.991"
bandit = "^1.7.0"
safety = "^2.3.0"

# Documentation
sphinx = "^5.3.0"
sphinx-rtd-theme = "^1.1.0"
myst-parser = "^0.18.0"
interrogate = "^1.5.0"

# Development utilities
pre-commit = "^2.20.0"
ipython = "^8.6.0"
jupyter = "^1.0.0"
jupyterlab = "^3.5.0"

# Performance monitoring
psutil = "^5.9.0"
memory-profiler = "^0.60.0"
line-profiler = "^4.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^5.3.0"
sphinx-rtd-theme = "^1.1.0"
sphinx-autoapi = "^2.0.0"
myst-parser = "^0.18.0"

[tool.poetry.extras]
api = ["fastapi", "uvicorn"]
monitoring = ["prometheus-client", "opentelemetry-api", "opentelemetry-sdk"]
all = ["fastapi", "uvicorn", "prometheus-client", "opentelemetry-api", "opentelemetry-sdk"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ===============================================
# Tool Configurations
# ===============================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src"]
known_third_party = ["pytest", "numpy", "pandas", "matplotlib", "sklearn"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "W0621",  # Redefined outer name
]

[tool.pylint.format]
max-line-length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "sklearn.*",
    "scipy.*",
    "pytest.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "structlog.*",
    "prometheus_client.*",
    "psutil.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "smoke: marks tests as smoke tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.flake8]
max-line-length = 100
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:F401,F811,F841",  # allow unused imports and variables in tests
]