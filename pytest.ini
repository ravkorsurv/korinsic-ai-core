[tool:pytest]
# Pytest configuration for Person-Centric Surveillance System Tests

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum pytest version
minversion = 6.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --color=yes

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    performance: Performance and stress tests
    regulatory: Regulatory compliance tests
    slow: Slow running tests (> 5 seconds)
    
    # Risk typology markers
    insider_dealing: Tests for insider dealing detection
    spoofing: Tests for spoofing detection
    market_manipulation: Tests for market manipulation detection
    front_running: Tests for front running detection
    wash_trading: Tests for wash trading detection
    cross_desk_collusion: Tests for cross-desk collusion detection
    
    # Component markers
    entity_resolution: Tests for entity resolution components
    evidence_aggregation: Tests for evidence aggregation
    cross_typology: Tests for cross-typology signal sharing
    alert_generation: Tests for alert generation
    explainability: Tests for regulatory explainability
    
    # Data quality markers
    data_validation: Tests for data quality and validation
    missing_data: Tests for handling missing data
    invalid_data: Tests for handling invalid data
    
    # Regulatory framework markers
    stor: Tests for STOR compliance
    mar: Tests for MAR compliance
    mifid_ii: Tests for MiFID II compliance
    
    # Performance markers
    large_dataset: Tests with large datasets
    concurrent: Tests for concurrent processing
    memory_intensive: Memory intensive tests

# Test filtering options
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution (when pytest-xdist is installed)
# Use -n auto to automatically detect number of CPUs
# Or specify number: -n 4

# Collection configuration
collect_ignore = 
    setup.py
    build
    dist
    .tox
    .git
    __pycache__
    *.egg-info

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Coverage configuration
[coverage:run]
source = src
omit = 
    src/tests/*
    src/scripts/*
    */venv/*
    */virtualenv/*
    */__pycache__/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml