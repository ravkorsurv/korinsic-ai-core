name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.9'
  ENVIRONMENT: testing

jobs:
  # Quality Gates - Fast feedback
  quality-gates:
    runs-on: ubuntu-latest
    name: Quality Gates
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run code quality checks
      run: |
        python scripts/development/run_quality_checks.py --essential
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-report
        path: |
          quality_report.html
          quality_report.json

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit_report.json
        safety check --json --output safety_report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit_report.json
          safety_report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=test-results-unit.xml \
          -v
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-${{ matrix.python-version }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          test-results-unit.xml
          htmlcov/
          coverage.xml

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: korai_test
          POSTGRES_USER: korai
          POSTGRES_PASSWORD: korai_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Wait for services
      run: |
        sleep 10
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://korai:korai_test@localhost:5432/korai_test
        REDIS_URL: redis://localhost:6379
      run: |
        python -m pytest tests/integration/ \
          --junitxml=test-results-integration.xml \
          -v
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results-integration.xml

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: korai_test
          POSTGRES_USER: korai
          POSTGRES_PASSWORD: korai_test
        ports:
          - 5432:5432
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Start application
      env:
        DATABASE_URL: postgresql://korai:korai_test@localhost:5432/korai_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        python src/app.py &
        sleep 30
        
    - name: Run E2E tests
      env:
        DATABASE_URL: postgresql://korai:korai_test@localhost:5432/korai_test
        REDIS_URL: redis://localhost:6379
        API_BASE_URL: http://localhost:5000
      run: |
        python -m pytest tests/e2e/ \
          --junitxml=test-results-e2e.xml \
          -v
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results-e2e.xml

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ \
          --junitxml=test-results-performance.xml \
          -v
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-results-performance.xml

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kor-ai-core:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 5000:5000 --name test-container kor-ai-core:test
        sleep 30
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container

  # Comprehensive Test Report
  test-report:
    runs-on: ubuntu-latest
    name: Generate Test Report
    needs: [quality-gates, security-scan, unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive report
      run: |
        python scripts/development/run_tests.py --ci
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-test-report
        path: |
          test_report.html
          test_report.json

  # Deployment (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [quality-gates, security-scan, unit-tests, integration-tests, e2e-tests, performance-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/kor-ai-core:staging
          ${{ secrets.REGISTRY_URL }}/kor-ai-core:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        # Add your deployment script here
        echo "Deploying to staging environment..."
        
    - name: Run smoke tests
      run: |
        # Add smoke test script here
        echo "Running smoke tests..."
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Staging deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production Deployment (manual approval required)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Pull staging image
      run: |
        docker pull ${{ secrets.REGISTRY_URL }}/kor-ai-core:staging
        
    - name: Tag for production
      run: |
        docker tag ${{ secrets.REGISTRY_URL }}/kor-ai-core:staging ${{ secrets.REGISTRY_URL }}/kor-ai-core:production
        docker tag ${{ secrets.REGISTRY_URL }}/kor-ai-core:staging ${{ secrets.REGISTRY_URL }}/kor-ai-core:v${{ github.run_number }}
        
    - name: Push production tags
      run: |
        docker push ${{ secrets.REGISTRY_URL }}/kor-ai-core:production
        docker push ${{ secrets.REGISTRY_URL }}/kor-ai-core:v${{ github.run_number }}
        
    - name: Deploy to production
      run: |
        # Add your production deployment script here
        echo "Deploying to production environment..."
        
    - name: Run production smoke tests
      run: |
        # Add production smoke test script here
        echo "Running production smoke tests..."
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          ## Changes
          - All tests passed
          - Quality gates met
          - Security scans passed
          - Successfully deployed to staging
          
        draft: false
        prerelease: false
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [test-report]
    if: always()
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        # Add cleanup logic here if needed